name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt', '**/test_requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test_requirements.txt
    
    - name: Run tests with coverage
      run: |
        pip install pytest-cov
        python -m pytest test_rust_patch_monitor.py test_golden_masters.py --cov=rust_patch_monitor --cov-report=xml --cov-report=term -v
    
    - name: Test CLI functionality
      run: |
        python rust_patch_monitor.py --help
        python rust_patch_monitor.py list-patches --help
        python rust_patch_monitor.py analyze --help
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements.txt') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 bandit safety
    
    - name: Run black
      run: black --check --diff rust_patch_monitor.py test_rust_patch_monitor.py test_golden_masters.py --line-length=120
    
    - name: Run flake8
      run: flake8 rust_patch_monitor.py test_rust_patch_monitor.py test_golden_masters.py --max-line-length=120 --extend-ignore=E203,W503
    
    - name: Run security checks
      run: |
        # Check for security issues in code
        bandit -r rust_patch_monitor.py -f json -o bandit-report.json || true
        
        # Check for known security vulnerabilities in dependencies
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  # Web UI build and test
  web-ui:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["18", "20"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: web-ui/package-lock.json
    
    - name: Install web UI dependencies
      working-directory: web-ui
      run: npm ci
    
    - name: Build web UI
      working-directory: web-ui
      run: npm run build
    
    - name: Test web UI build output
      working-directory: web-ui
      run: |
        # Verify build artifacts exist
        if [ ! -d "dist" ]; then
          echo "Build output directory not found"
          exit 1
        fi
        if [ ! -f "dist/index.html" ]; then
          echo "Main HTML file not found"
          exit 1
        fi
        echo "Web UI build successful"
    
    - name: Upload web UI build artifacts
      if: matrix.node-version == '20'
      uses: actions/upload-artifact@v4
      with:
        name: web-ui-build
        path: web-ui/dist/
        retention-days: 7

  # Ensure all checks pass
  all-checks:
    runs-on: ubuntu-latest
    needs: [test, lint, web-ui]
    if: always()
    steps:
    - name: Check all jobs
      run: |
        if [[ "${{ needs.test.result }}" != "success" || "${{ needs.lint.result }}" != "success" || "${{ needs.web-ui.result }}" != "success" ]]; then
          echo "One or more required checks failed"
          exit 1
        fi
        echo "All checks passed!"